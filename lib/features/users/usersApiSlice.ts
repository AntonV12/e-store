// Need to use the React-specific entry point to import `createApi`
import { UserType } from "@/lib/types/types";
import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";

// Define a service using a base URL and expected endpoints
export const usersApiSlice = createApi({
  baseQuery: fetchBaseQuery({ baseUrl: "/api/users" }),
  reducerPath: "usersApi",
  // Tag types are used for caching and invalidation.
  tagTypes: ["Users"],
  endpoints: (build) => ({
    // Supply generics for the return type (in this case `QuotesApiResponse`)
    // and the expected query argument. If there is no argument, use `void`
    // for the argument type instead.
    getUsers: build.query<UserType[], number>({
      query: (limit) => `?limit=${limit}`,
      // `providesTags` determines which 'tag' is attached to the
      // cached data returned by the query.
      providesTags: (result, error, id) => [{ type: "Users", id }],
    }),
    getUserById: build.query<UserType, number>({
      query: (id) => `/${id}`,
      providesTags: (result, error, id) => [{ type: "Users", id }],
    }),
    setUser: build.mutation<UserType, UserType>({
      query: (user) => ({
        url: "/",
        method: "POST",
        body: user,
      }),
      invalidatesTags: ["Users"],
    }),
    updateUser: build.mutation<UserType, UserType>({
      query: (user) => ({
        url: `/${user.id}`,
        method: "PUT",
        body: user,
      }),
      invalidatesTags: ["Users"],
    }),
  }),
});

// Hooks are auto-generated by RTK-Query
// Same as `quotesApiSlice.endpoints.getQuotes.useQuery`
export const { /* useGetUsersQuery, */ useGetUserByIdQuery, useSetUserMutation, useUpdateUserMutation } = usersApiSlice;
