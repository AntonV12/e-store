// Need to use the React-specific entry point to import `createApi`
import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";

interface IUser {
  id: number;
  name: string;
  age: number;
  salary: number;
}

interface UsersApiResponse {
  users: IUser[];
  total: number;
  skip: number;
  limit: number;
}

// Define a service using a base URL and expected endpoints
export const usersApiSlice = createApi({
  baseQuery: fetchBaseQuery({ baseUrl: "/api/users" }),
  reducerPath: "usersApi",
  // Tag types are used for caching and invalidation.
  tagTypes: ["Users"],
  endpoints: (build) => ({
    // Supply generics for the return type (in this case `QuotesApiResponse`)
    // and the expected query argument. If there is no argument, use `void`
    // for the argument type instead.
    getUsers: build.query<UsersApiResponse, number>({
      query: (limit = 10) => `?limit=${limit}`,
      transformResponse: (response: UsersApiResponse) => ({
        ...response,
        users: response.users || [],
      }),
      // `providesTags` determines which 'tag' is attached to the
      // cached data returned by the query.
      providesTags: ["Users"],
    }),
  }),
});

// Hooks are auto-generated by RTK-Query
// Same as `quotesApiSlice.endpoints.getQuotes.useQuery`
export const { useGetUsersQuery } = usersApiSlice;
