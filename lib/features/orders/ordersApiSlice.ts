// Need to use the React-specific entry point to import `createApi`
import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";
import { OrderType, EncryptedOrderType } from "@/lib/types/types";

// Define a service using a base URL and expected endpoints
export const ordersApiSlice = createApi({
  baseQuery: fetchBaseQuery({ baseUrl: "/api/orders" }),
  reducerPath: "ordersApi",
  // Tag types are used for caching and invalidation.
  tagTypes: ["Orders"],
  endpoints: (build) => ({
    createOrder: build.mutation<{ orderNumber: number; message: string }, EncryptedOrderType>({
      query: (order) => ({
        url: "/",
        method: "POST",
        body: order,
      }),
      invalidatesTags: ["Orders"],
    }),
    getOrders: build.query<OrderType[], { limit: number; done: boolean; userId: number | undefined }>({
      query: ({ userId, limit, done }) => `/?userId=${userId ?? ""}&limit=${limit}&done=${done}`,
      providesTags: (result, error, id) => ["Orders"],
    }),
    updateOrder: build.mutation<{ message: string }, { id: number; param: string; value: string | number | boolean }>({
      query: ({ id, param, value }) => ({
        url: `/`,
        method: "PATCH",
        body: { id, param, value },
      }),
      invalidatesTags: ["Orders"],
    }),
  }),
});

// Hooks are auto-generated by RTK-Query
// Same as `quotesApiSlice.endpoints.getQuotes.useQuery`
export const { useCreateOrderMutation, useGetOrdersQuery, useUpdateOrderMutation } = ordersApiSlice;
