// Need to use the React-specific entry point to import `createApi`
import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";
import { ProductType } from "@/lib/types/types";

// Define a service using a base URL and expected endpoints
export const productsApiSlice = createApi({
  baseQuery: fetchBaseQuery({ baseUrl: "/api/products" }),
  reducerPath: "productsApi",
  // Tag types are used for caching and invalidation.
  tagTypes: ["Products"],
  endpoints: (build) => ({
    // Supply generics for the return type (in this case `QuotesApiResponse`)
    // and the expected query argument. If there is no argument, use `void`
    // for the argument type instead.
    getProducts: build.query<ProductType[], { limit: number; name: string; category: string }>({
      query: ({ limit, name, category }) => `?limit=${limit}&name=${name}&category=${category}`,
      // `providesTags` determines which 'tag' is attached to the
      // cached data returned by the query.
      providesTags: (result, error, id) => [{ type: "Products", id: `${id.limit}-${id.name}` }],
    }),
    getProductById: build.query<ProductType, number>({
      query: (id) => `/${id}`,
      providesTags: (result, error, id) => [{ type: "Products", id }],
    }),
    updateProduct: build.mutation<ProductType, ProductType>({
      query: (product) => ({
        url: `/${product.id}`,
        method: "PUT",
        body: product,
      }),
      invalidatesTags: ["Products"],
    }),
    getCategories: build.query<string[], void>({
      query: () => "/categories",
    }),
    createProduct: build.mutation<ProductType, ProductType>({
      query: (product) => ({
        url: "/",
        method: "POST",
        body: product,
      }),
      invalidatesTags: ["Products"],
    }),
  }),
});

// Hooks are auto-generated by RTK-Query
// Same as `quotesApiSlice.endpoints.getQuotes.useQuery`
export const {
  useGetProductsQuery,
  useGetProductByIdQuery,
  useUpdateProductMutation,
  useGetCategoriesQuery,
  useCreateProductMutation,
} = productsApiSlice;
