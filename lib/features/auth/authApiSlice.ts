// Need to use the React-specific entry point to import `createApi`
import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";

interface User {
  id: number | null;
  name: string;
  password: string;
}

interface UsersApiResponse {
  users: User[];
  total: number;
}

// Define a service using a base URL and expected endpoints
export const authApiSlice = createApi({
  baseQuery: fetchBaseQuery({ baseUrl: "/api/auth" }),
  reducerPath: "authApi",
  // Tag types are used for caching and invalidation.
  tagTypes: ["Auth"],
  endpoints: (build) => ({
    authUser: build.mutation<User, User>({
      query: (user) => ({
        url: "/",
        method: "POST",
        body: user,
      }),
      invalidatesTags: ["Auth"],
    }),
    logoutUser: build.mutation<void, void>({
      query: () => ({
        url: "/logout",
        method: "POST",
      }),
      invalidatesTags: [],
    }),
    getCurrentUser: build.query<User | null, void>({
      query: () => ({
        url: "/current",
        method: "GET",
      }),
      providesTags: ["Auth"],
    }),
  }),
});

// Hooks are auto-generated by RTK-Query
// Same as `quotesApiSlice.endpoints.getQuotes.useQuery`
export const { useAuthUserMutation, useLogoutUserMutation, useGetCurrentUserQuery } = authApiSlice;
